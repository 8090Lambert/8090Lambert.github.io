<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>8090Lambert | Blog</title>
  
  <subtitle>A Programmer With Coding.</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://8090lambert.github.io/blog/"/>
  <updated>2018-10-27T04:24:05.000Z</updated>
  <id>https://8090lambert.github.io/blog/</id>
  
  <author>
    <name>8090Lambert</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PHP的魔术方法：__clone()</title>
    <link href="https://8090lambert.github.io/blog/2016/07/16/PHP%E7%9A%84%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%EF%BC%9A-clone/"/>
    <id>https://8090lambert.github.io/blog/2016/07/16/PHP的魔术方法：-clone/</id>
    <published>2016-07-16T06:59:14.000Z</published>
    <updated>2018-10-27T04:24:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在写代码的时候，碰到需要copy对象，在 php.net 看到这段话：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$copy_of_object = clone $object;</span><br><span class="line">当对象被复制后，PHP 5 会对对象的所有属性执行一个浅复制（shallow copy）。所有的引用属性 仍然会是一个指向原来的变量的引用。</span><br></pre></td></tr></table></figure></p><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><p>在PHP中， 对象间的赋值操作实际上是引用操作 （事实上，绝大部分的编程语言都是如此! 主要原因是内存及性能的问题)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$bob = new Boy(10);</span><br><span class="line">$jack = $bob;</span><br><span class="line">$jack-&gt;age++;</span><br><span class="line"></span><br><span class="line">echo $jack-&gt;age;    // 11</span><br><span class="line">echo $bob-&gt;age; // 11</span><br></pre></td></tr></table></figure></p><h3 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h3><p>其实 $bob 和 $jack 指针都是指向同一个内存区，所以，修改任意一个对象，另外一个对象也会随之变化。<br>如果我们不希望对象是 reference 方式的复制，这就需要用到 clone 关键字。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$school = new School();</span><br><span class="line">$jack = new Boy(10);</span><br><span class="line">$school-&gt;FirstGrade($jack);</span><br><span class="line">$school2 = clone $school;</span><br><span class="line">$jack-&gt;age++;</span><br><span class="line"></span><br><span class="line">echo $school-&gt;firstGrader-&gt;age; // 11</span><br><span class="line">echo $school2-&gt;firstGrader-&gt;age;    // 11, 克隆对象中的对象 (引用属性) 也被修改</span><br></pre></td></tr></table></figure></p><p>如果想要对象中的属性完全复制(指克隆对象和源对象指向两个不同的内存区)</p><h3 id="深克隆"><a href="#深克隆" class="headerlink" title="深克隆"></a>深克隆</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class School</span><br><span class="line">&#123;</span><br><span class="line">    public $grader;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param $grader</span><br><span class="line">     */</span><br><span class="line">    public function grade($grader)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;grader = $grader;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public function __clone()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;grader = clone $this-&gt;grader;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$school = new School();</span><br><span class="line">$jack = new Boy(10);</span><br><span class="line">$school-&gt;grade($jack);</span><br><span class="line">$school2 = clone $school;</span><br><span class="line">$jack-&gt;age++;</span><br><span class="line"></span><br><span class="line">echo $school-&gt;grader-&gt;age;  // 11</span><br><span class="line">echo $school2-&gt;grader-&gt;age; // 10   此时，克隆的对象未发生变化。</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>浅克隆：变量类型为标量(int，string, bool, array)为值传递，对象类型为引用传递。<br>深克隆：所有元素或属性均完全复制，与源对象无关，也就是说所有对于新对象的修改都不会影响到源对象。</p><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>在PHP里，只需要 <code>$cloneObject = unserialize(serialize($object))</code> 对源对象做 序列化-&gt;反序列化 的操作，便可以得到深克隆的对象。（会有性能损失和安全问题，下一章会说对象序列化的安全问题）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在写代码的时候，碰到需要copy对象，在 php.net 看到这段话：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b
      
    
    </summary>
    
    
      <category term="php" scheme="https://8090lambert.github.io/blog/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://8090lambert.github.io/blog/2016/07/13/hello-world/"/>
    <id>https://8090lambert.github.io/blog/2016/07/13/hello-world/</id>
    <published>2016-07-13T05:52:06.000Z</published>
    <updated>2018-10-26T14:24:23.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
</feed>
